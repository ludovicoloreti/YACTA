{
  "Initial Access": {
    "T1189": {
      "name": "Drive-by Compromise",
      "description": "A drive-by compromise is when an adversary gains access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is targeted for exploitation.",
      "url": "https://attack.mitre.org/techniques/T1189/"
    },
    "T1190": {
      "name": "Exploit Public-Facing Application",
      "description": "The use of software, data, or commands to take advantage of a weakness in an Internet-facing computer system or program in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL) , standard services (like SMB or SSH), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include Exploitation for Defense Evasion.",
      "url": "https://attack.mitre.org/techniques/T1190/"
    },
    "T1133": {
      "name": "External Remote Services",
      "description": "Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management can also be used externally.",
      "url": "https://attack.mitre.org/techniques/T1133/"
    },
    "T1200": {
      "name": "Hardware Additions",
      "description": "Computer accessories, computers, or networking hardware may be introduced into a system as a vector to gain execution. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
      "url": "https://attack.mitre.org/techniques/T1200/"
    },
    "T1091": {
      "name": "Replication Through Removable Media",
      "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
      "url": "https://attack.mitre.org/techniques/T1091/"
    },
    "T1193": {
      "name": "Spearphishing Attachment",
      "description": "Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution.",
      "url": "https://attack.mitre.org/techniques/T1193/"
    },
    "T1192": {
      "name": "Spearphishing Link",
      "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments.",
      "url": "https://attack.mitre.org/techniques/T1192/"
    },
    "T1194": {
      "name": "Spearphishing via Service",
      "description": "Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.",
      "url": "https://attack.mitre.org/techniques/T1194/"
    },
    "T1195": {
      "name": "Supply Chain Compromise",
      "description": "Supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
      "url": "https://attack.mitre.org/techniques/T1195/"
    },
    "T1199": {
      "name": "Trusted Relationship",
      "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
      "url": "https://attack.mitre.org/techniques/T1199/"
    },
    "T1078": {
      "name": "Valid Accounts",
      "description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access.",
      "url": "https://attack.mitre.org/techniques/T1078/"
    }
  },
  "Execution": {
    "T1155": {
      "name": "AppleScript",
      "description": "macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the osalang program.",
      "url": "https://attack.mitre.org/techniques/T1155/"
    },
    "T1191": {
      "name": "CMSTP",
      "description": "The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
      "url": "https://attack.mitre.org/techniques/T1191/"
    },
    "T1059": {
      "name": "Command-Line Interface",
      "description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. One example command-line interface on Windows systems is cmd, which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. Scheduled Task).",
      "url": "https://attack.mitre.org/techniques/T1059/"
    },
    "T1223": {
      "name": "Compiled HTML File",
      "description": "Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
      "url": "https://attack.mitre.org/techniques/T1223/"
    },
    "T1196": {
      "name": "Control Panel Items",
      "description": "Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.",
      "url": "https://attack.mitre.org/techniques/T1196/"
    },
    "T1173": {
      "name": "Dynamic Data Exchange",
      "description": "Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
      "url": "https://attack.mitre.org/techniques/T1173/"
    },
    "T1106": {
      "name": "Execution through API",
      "description": "Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters.",
      "url": "https://attack.mitre.org/techniques/T1106/"
    },
    "T1129": {
      "name": "Execution through Module Load",
      "description": "The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API.",
      "url": "https://attack.mitre.org/techniques/T1129/"
    },
    "T1203": {
      "name": "Exploitation for Client Execution",
      "description": "Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.",
      "url": "https://attack.mitre.org/techniques/T1203/"
    },
    "T1061": {
      "name": "Graphical User Interface",
      "description": "The Graphical User Interfaces (GUI) is a common way to interact with an operating system. Adversaries may use a system's GUI during an operation, commonly through a remote interactive session such as Remote Desktop Protocol, instead of through a Command-Line Interface, to search for information and execute files via mouse double-click events, the Windows Run command , or other potentially difficult to monitor interactions.",
      "url": "https://attack.mitre.org/techniques/T1061/"
    },
    "T1118": {
      "name": "InstallUtil",
      "description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe. InstallUtil.exe is digitally signed by Microsoft.",
      "url": "https://attack.mitre.org/techniques/T1118/"
    },
    "T1152": {
      "name": "Launchctl",
      "description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made . Running a command from launchctl is as simple as launchctl submit -l -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\". Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges.",
      "url": "https://attack.mitre.org/techniques/T1152/"
    },
    "T1168": {
      "name": "Local Job Scheduling",
      "description": "On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, at, and launchd. Unlike Scheduled Task on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).",
      "url": "https://attack.mitre.org/techniques/T1168/"
    },
    "T1177": {
      "name": "LSASS Driver",
      "description": "The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
      "url": "https://attack.mitre.org/techniques/T1177/"
    },
    "T1170": {
      "name": "Mshta",
      "description": "Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension .hta. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.",
      "url": "https://attack.mitre.org/techniques/T1170/"
    },
    "T1086": {
      "name": "PowerShell",
      "description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer.",
      "url": "https://attack.mitre.org/techniques/T1086/"
    },
    "T1121": {
      "name": "Regsvcs/Regasm",
      "description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.",
      "url": "https://attack.mitre.org/techniques/T1121/"
    },
    "T1117": {
      "name": "Regsvr32",
      "description": "Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries.",
      "url": "https://attack.mitre.org/techniques/T1117/"
    },
    "T1085": {
      "name": "Rundll32",
      "description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.",
      "url": "https://attack.mitre.org/techniques/T1085/"
    },
    "T1053": {
      "name": "Scheduled Task",
      "description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. Scheduling a task on a remote system typically required being a member of the Administrators group on the the remote system.",
      "url": "https://attack.mitre.org/techniques/T1053/"
    },
    "T1064": {
      "name": "Scripting",
      "description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.",
      "url": "https://attack.mitre.org/techniques/T1064/"
    },
    "T1035": {
      "name": "Service Execution",
      "description": "Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with New Service and Modify Existing Service during service persistence or privilege escalation.",
      "url": "https://attack.mitre.org/techniques/T1035/"
    },
    "T1218": {
      "name": "Signed Binary Proxy Execution",
      "description": "Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application whitelisting and signature validation on systems. This technique accounts for proxy execution methods that are not already accounted for within the existing techniques.",
      "url": "https://attack.mitre.org/techniques/T1218/"
    },
    "T1216": {
      "name": "Signed Script Proxy Execution",
      "description": "Scripts signed with trusted certificates can be used to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application whitelisting solutions that do not account for use of these scripts.",
      "url": "https://attack.mitre.org/techniques/T1216/"
    },
    "T1153": {
      "name": "Source",
      "description": "The source command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways source /path/to/filename [arguments] or . /path/to/filename [arguments]. Take note of the space after the \".\". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment.",
      "url": "https://attack.mitre.org/techniques/T1153/"
    },
    "T1151": {
      "name": "Space after Filename",
      "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to \"evil.txt \" (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed .",
      "url": "https://attack.mitre.org/techniques/T1151/"
    },
    "T1072": {
      "name": "Third-party Software",
      "description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.",
      "url": "https://attack.mitre.org/techniques/T1072/"
    },
    "T1154": {
      "name": "Trap",
      "description": "The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.",
      "url": "https://attack.mitre.org/techniques/T1154/"
    },
    "T1127": {
      "name": "Trusted Developer Utilities",
      "description": "There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.",
      "url": "https://attack.mitre.org/techniques/T1127/"
    },
    "T1204": {
      "name": "User Execution",
      "description": "An adversary may rely upon specific actions by a user in order to gain execution. This may be direct code execution, such as when a user opens a malicious executable delivered via Spearphishing Attachment with the icon and apparent extension of a document file. It also may lead to other execution techniques, such as when a user clicks on a link delivered via Spearphishing Link that leads to exploitation of a browser or application vulnerability via Exploitation for Client Execution. While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it.",
      "url": "https://attack.mitre.org/techniques/T1204/"
    },
    "T1047": {
      "name": "Windows Management Instrumentation",
      "description": "Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
      "url": "https://attack.mitre.org/techniques/T1047/"
    },
    "T1028": {
      "name": "Windows Remote Management",
      "description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.",
      "url": "https://attack.mitre.org/techniques/T1028/"
    },
    "T1220": {
      "name": "XSL Script Processing",
      "description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.",
      "url": "https://attack.mitre.org/techniques/T1220/"
    }
  },
  "Persistence": {
    "T1156": {
      "name": ".bash_profile and .bashrc",
      "description": "~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed.",
      "url": "https://attack.mitre.org/techniques/T1156/"
    },
    "T1015": {
      "name": "Accessibility Features",
      "description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
      "url": "https://attack.mitre.org/techniques/T1015/"
    },
    "T1098": {
      "name": "Account Manipulation",
      "description": "Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to subvert password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
      "url": "https://attack.mitre.org/techniques/T1098/"
    },
    "T1182": {
      "name": "AppCert DLLs",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec.",
      "url": "https://attack.mitre.org/techniques/T1182/"
    },
    "T1103": {
      "name": "AppInit DLLs",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.",
      "url": "https://attack.mitre.org/techniques/T1103/"
    },
    "T1138": {
      "name": "Application Shimming",
      "description": "The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses Hooking to redirect the code as necessary in order to communicate with the OS.",
      "url": "https://attack.mitre.org/techniques/T1138/"
    },
    "T1131": {
      "name": "Authentication Package",
      "description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.",
      "url": "https://attack.mitre.org/techniques/T1131/"
    },
    "T1197": {
      "name": "BITS Jobs",
      "description": "Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
      "url": "https://attack.mitre.org/techniques/T1197/"
    },
    "T1067": {
      "name": "Bootkit",
      "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).",
      "url": "https://attack.mitre.org/techniques/T1067/"
    },
    "T1176": {
      "name": "Browser Extensions",
      "description": "Browser extensions or plugins are small programs that can add functionality and customize aspects of internet browsers. They can be installed directly or through a browser's app store. Extensions generally have access and permissions to everything that the browser can access.",
      "url": "https://attack.mitre.org/techniques/T1176/"
    },
    "T1042": {
      "name": "Change Default File Association",
      "description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.",
      "url": "https://attack.mitre.org/techniques/T1042/"
    },
    "T1109": {
      "name": "Component Firmware",
      "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
      "url": "https://attack.mitre.org/techniques/T1109/"
    },
    "T1122": {
      "name": "Component Object Model Hijacking",
      "description": "The Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
      "url": "https://attack.mitre.org/techniques/T1122/"
    },
    "T1136": {
      "name": "Create Account",
      "description": "Adversaries with a sufficient level of access may create a local system or domain account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.",
      "url": "https://attack.mitre.org/techniques/T1136/"
    },
    "T1038": {
      "name": "DLL Search Order Hijacking",
      "description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.",
      "url": "https://attack.mitre.org/techniques/T1038/"
    },
    "T1157": {
      "name": "Dylib Hijacking",
      "description": "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.",
      "url": "https://attack.mitre.org/techniques/T1157/"
    },
    "T1133": {
      "name": "External Remote Services",
      "description": "Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management can also be used externally.",
      "url": "https://attack.mitre.org/techniques/T1133/"
    },
    "T1044": {
      "name": "File System Permissions Weakness",
      "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
      "url": "https://attack.mitre.org/techniques/T1044/"
    },
    "T1158": {
      "name": "Hidden Files and Directories",
      "description": "To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).",
      "url": "https://attack.mitre.org/techniques/T1158/"
    },
    "T1179": {
      "name": "Hooking",
      "description": "Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.",
      "url": "https://attack.mitre.org/techniques/T1179/"
    },
    "T1062": {
      "name": "Hypervisor",
      "description": "A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. A type-1 hypervisor operates at a level below the operating system and could be designed with Rootkit functionality to hide its existence from the guest operating system. A malicious hypervisor of this nature could be used to persist on systems through interruption.",
      "url": "https://attack.mitre.org/techniques/T1062/"
    },
    "T1183": {
      "name": "Image File Execution Options Injection",
      "description": "Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., “C:\\dbg\\ntsd.exe -g notepad.exe”).",
      "url": "https://attack.mitre.org/techniques/T1183/"
    },
    "T1215": {
      "name": "Kernel Modules and Extensions",
      "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.  When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0).  Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects.",
      "url": "https://attack.mitre.org/techniques/T1215/"
    },
    "T1159": {
      "name": "Launch Agent",
      "description": "Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in /System/Library/LaunchAgents, /Library/LaunchAgents, and $HOME/Library/LaunchAgents . These launch agents have property list files which point to the executables that will be launched .",
      "url": "https://attack.mitre.org/techniques/T1159/"
    },
    "T1160": {
      "name": "Launch Daemon",
      "description": "Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in /System/Library/LaunchDaemons and /Library/LaunchDaemons . These LaunchDaemons have property list files which point to the executables that will be launched .",
      "url": "https://attack.mitre.org/techniques/T1160/"
    },
    "T1152": {
      "name": "Launchctl",
      "description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made . Running a command from launchctl is as simple as launchctl submit -l -- /Path/to/thing/to/execute arg arg arg. Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges.",
      "url": "https://attack.mitre.org/techniques/T1152/"
    },
    "T1161": {
      "name": "LC_LOAD_DYLIB Addition",
      "description": "Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies . There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time .",
      "url": "https://attack.mitre.org/techniques/T1161/"
    },
    "T1168": {
      "name": "Local Job Scheduling",
      "description": "On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, at, and launchd. Unlike Scheduled Task on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).",
      "url": "https://attack.mitre.org/techniques/T1168/"
    },
    "T1162": {
      "name": "Login Item",
      "description": "MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them . Users have direct control over login items installed using a shared file list which are also visible in System Preferences . These login items are stored in the user's ~/Library/Preferences/ directory in a plist file called com.apple.loginitems.plist . Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to ‘Hide’ the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in . The API method SMLoginItemSetEnabled can be used to set Login Items, but scripting languages like AppleScript can do this as well .",
      "url": "https://attack.mitre.org/techniques/T1162/"
    },
    "T1037": {
      "name": "Logon Scripts",
      "description": "Windows allows logon scripts to be run whenever a specific user or group of users log into a system. The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.",
      "url": "https://attack.mitre.org/techniques/T1037/"
    },
    "T1177": {
      "name": "LSASS Driver",
      "description": "The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
      "url": "https://attack.mitre.org/techniques/T1177/"
    },
    "T1031": {
      "name": "Modify Existing Service",
      "description": "Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.",
      "url": "https://attack.mitre.org/techniques/T1031/"
    },
    "T1128": {
      "name": "Netsh Helper DLL",
      "description": "Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.",
      "url": "https://attack.mitre.org/techniques/T1128/"
    },
    "T1050": {
      "name": "New Service",
      "description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry.",
      "url": "https://attack.mitre.org/techniques/T1050/"
    },
    "T1137": {
      "name": "Office Application Startup",
      "description": "Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started.",
      "url": "https://attack.mitre.org/techniques/T1137/"
    },
    "T1034": {
      "name": "Path Interception",
      "description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.",
      "url": "https://attack.mitre.org/techniques/T1034/"
    },
    "T1150": {
      "name": "Plist Modification",
      "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with a user's privileges).",
      "url": "https://attack.mitre.org/techniques/T1150/"
    },
    "T1205": {
      "name": "Port Knocking",
      "description": "Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access. To enable a port, an adversary sends a series of packets with certain characteristics before the port will be opened. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports, but can involve unusual flags, specific strings or other unique characteristics. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
      "url": "https://attack.mitre.org/techniques/T1205/"
    },
    "T1013": {
      "name": "Port Monitors",
      "description": "A port monitor can be set through the API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors.",
      "url": "https://attack.mitre.org/techniques/T1013/"
    },
    "T1163": {
      "name": "Rc.common",
      "description": "During the boot process, macOS executes source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.",
      "url": "https://attack.mitre.org/techniques/T1163/"
    },
    "T1164": {
      "name": "Re-opened Applications",
      "description": "Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at ~/Library/Preferences/com.apple.loginwindow.plist and ~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
      "url": "https://attack.mitre.org/techniques/T1164/"
    },
    "T1108": {
      "name": "Redundant Access",
      "description": "Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Valid Accounts to use External Remote Services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.",
      "url": "https://attack.mitre.org/techniques/T1108/"
    },
    "T1060": {
      "name": "Registry Run Keys / Startup Folder",
      "description": "Adding an entry to the \"run keys \" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.",
      "url": "https://attack.mitre.org/techniques/T1060/"
    },
    "T1053": {
      "name": "Scheduled Task",
      "description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. Scheduling a task on a remote system typically required being a member of the Administrators group on the the remote system.",
      "url": "https://attack.mitre.org/techniques/T1053/"
    },
    "T1180": {
      "name": "Screensaver",
      "description": "Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\\Windows\\System32\\, and C:\\Windows\\sysWOW64\\ on 64-bit Windows systems, along with screensavers included with base Windows installations.",
      "url": "https://attack.mitre.org/techniques/T1180/"
    },
    "T1101": {
      "name": "Security Support Provider",
      "description": "Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",
      "url": "https://attack.mitre.org/techniques/T1101/"
    },
    "T1058": {
      "name": "Service Registry Permissions Weakness",
      "description": "Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through Access Control Lists and permissions.",
      "url": "https://attack.mitre.org/techniques/T1058/"
    },
    "T1166": {
      "name": "Setuid and Setgid",
      "description": "When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively . Normally an application is run in the current user’s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x \" when viewing a file's attributes via ls -l. The chmod program can set these bits with via bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file].",
      "url": "https://attack.mitre.org/techniques/T1166/"
    },
    "T1023": {
      "name": "Shortcut Modification",
      "description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.",
      "url": "https://attack.mitre.org/techniques/T1023/"
    },
    "T1198": {
      "name": "SIP and Trust Provider Hijacking",
      "description": "In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
      "url": "https://attack.mitre.org/techniques/T1198/"
    },
    "T1165": {
      "name": "Startup Items",
      "description": "Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items . This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory.",
      "url": "https://attack.mitre.org/techniques/T1165/"
    },
    "T1019": {
      "name": "System Firmware",
      "description": "The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
      "url": "https://attack.mitre.org/techniques/T1019/"
    },
    "T1501": {
      "name": "Systemd Service",
      "description": "Systemd services can be used to establish persistence on a Linux system. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
      "url": "https://attack.mitre.org/techniques/T1501/"
    },
    "T1209": {
      "name": "Time Providers",
      "description": "The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
      "url": "https://attack.mitre.org/techniques/T1209/"
    },
    "T1154": {
      "name": "Trap",
      "description": "The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.",
      "url": "https://attack.mitre.org/techniques/T1154/"
    },
    "T1078": {
      "name": "Valid Accounts",
      "description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access.",
      "url": "https://attack.mitre.org/techniques/T1078/"
    },
    "T1100": {
      "name": "Web Shell",
      "description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).",
      "url": "https://attack.mitre.org/techniques/T1100/"
    },
    "T1084": {
      "name": "Windows Management Instrumentation Event Subscription",
      "description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts. Examples of events that may be subscribed to are the wall clock time or the computer's uptime. Several threat groups have reportedly used this technique to maintain persistence.",
      "url": "https://attack.mitre.org/techniques/T1084/"
    },
    "T1004": {
      "name": "Winlogon Helper DLL",
      "description": "Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.",
      "url": "https://attack.mitre.org/techniques/T1004/"
    }
  },
  "Privilege Escalation": {
    "T1134": {
      "name": "Access Token Manipulation",
      "description": "Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. For example, Microsoft promotes the use of access tokens as a security best practice. Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command runas.",
      "url": "https://attack.mitre.org/techniques/T1134/"
    },
    "T1015": {
      "name": "Accessibility Features",
      "description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
      "url": "https://attack.mitre.org/techniques/T1015/"
    },
    "T1182": {
      "name": "AppCert DLLs",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec.",
      "url": "https://attack.mitre.org/techniques/T1182/"
    },
    "T1103": {
      "name": "AppInit DLLs",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.",
      "url": "https://attack.mitre.org/techniques/T1103/"
    },
    "T1138": {
      "name": "Application Shimming",
      "description": "The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses Hooking to redirect the code as necessary in order to communicate with the OS.",
      "url": "https://attack.mitre.org/techniques/T1138/"
    },
    "T1088": {
      "name": "Bypass User Account Control",
      "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
      "url": "https://attack.mitre.org/techniques/T1088/"
    },
    "T1038": {
      "name": "DLL Search Order Hijacking",
      "description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.",
      "url": "https://attack.mitre.org/techniques/T1038/"
    },
    "T1157": {
      "name": "Dylib Hijacking",
      "description": "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.",
      "url": "https://attack.mitre.org/techniques/T1157/"
    },
    "T1068": {
      "name": "Exploitation for Privilege Escalation",
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform Privilege Escalation to include use of software exploitation to circumvent those restrictions.",
      "url": "https://attack.mitre.org/techniques/T1068/"
    },
    "T1181": {
      "name": "Extra Window Memory Injection",
      "description": "Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.",
      "url": "https://attack.mitre.org/techniques/T1181/"
    },
    "T1044": {
      "name": "File System Permissions Weakness",
      "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
      "url": "https://attack.mitre.org/techniques/T1044/"
    },
    "T1179": {
      "name": "Hooking",
      "description": "Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.",
      "url": "https://attack.mitre.org/techniques/T1179/"
    },
    "T1183": {
      "name": "Image File Execution Options Injection",
      "description": "Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., “C:\\dbg\\ntsd.exe -g notepad.exe”).",
      "url": "https://attack.mitre.org/techniques/T1183/"
    },
    "T1160": {
      "name": "Launch Daemon",
      "description": "Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in /System/Library/LaunchDaemons and /Library/LaunchDaemons . These LaunchDaemons have property list files which point to the executables that will be launched .",
      "url": "https://attack.mitre.org/techniques/T1160/"
    },
    "T1050": {
      "name": "New Service",
      "description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry.",
      "url": "https://attack.mitre.org/techniques/T1050/"
    },
    "T1034": {
      "name": "Path Interception",
      "description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.",
      "url": "https://attack.mitre.org/techniques/T1034/"
    },
    "T1150": {
      "name": "Plist Modification",
      "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with a user's privileges).",
      "url": "https://attack.mitre.org/techniques/T1150/"
    },
    "T1013": {
      "name": "Port Monitors",
      "description": "A port monitor can be set through the API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors.",
      "url": "https://attack.mitre.org/techniques/T1013/"
    },
    "T1055": {
      "name": "Process Injection",
      "description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "url": "https://attack.mitre.org/techniques/T1055/"
    },
    "T1053": {
      "name": "Scheduled Task",
      "description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. Scheduling a task on a remote system typically required being a member of the Administrators group on the the remote system.",
      "url": "https://attack.mitre.org/techniques/T1053/"
    },
    "T1058": {
      "name": "Service Registry Permissions Weakness",
      "description": "Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through Access Control Lists and permissions.",
      "url": "https://attack.mitre.org/techniques/T1058/"
    },
    "T1166": {
      "name": "Setuid and Setgid",
      "description": "When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively . Normally an application is run in the current user’s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via ls -l. The chmod program can set these bits with via bitmasking, chmod 4777 \\[file\\] or via shorthand naming, chmod u+s \\[file\\].",
      "url": "https://attack.mitre.org/techniques/T1166/"
    },
    "T1178": {
      "name": "SID-History Injection",
      "description": "The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).",
      "url": "https://attack.mitre.org/techniques/T1178/"
    },
    "T1165": {
      "name": "Startup Items",
      "description": "Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items . This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory.",
      "url": "https://attack.mitre.org/techniques/T1165/"
    },
    "T1169": {
      "name": "Sudo",
      "description": "The sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL .",
      "url": "https://attack.mitre.org/techniques/T1169/"
    },
    "T1206": {
      "name": "Sudo Caching",
      "description": "The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout that is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).",
      "url": "https://attack.mitre.org/techniques/T1206/"
    },
    "T1078": {
      "name": "Valid Accounts",
      "description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access.",
      "url": "https://attack.mitre.org/techniques/T1078/"
    },
    "T1100": {
      "name": "Web Shell",
      "description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).",
      "url": "https://attack.mitre.org/techniques/T1100/"
    }
  },
  "Defense Evasion": {
    "T1134": {
      "name": "Access Token Manipulation",
      "description": "Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. For example, Microsoft promotes the use of access tokens as a security best practice. Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command runas.",
      "url": "https://attack.mitre.org/techniques/T1134/"
    },
    "T1009": {
      "name": "Binary Padding",
      "description": "Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists.",
      "url": "https://attack.mitre.org/techniques/T1009/"
    },
    "T1197": {
      "name": "BITS Jobs",
      "description": "Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
      "url": "https://attack.mitre.org/techniques/T1197/"
    },
    "T1088": {
      "name": "Bypass User Account Control",
      "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
      "url": "https://attack.mitre.org/techniques/T1088/"
    },
    "T1146": {
      "name": "Clear Command History",
      "description": "macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as unset HISTFILE, export HISTFILESIZE=0, history -c, rm ~/.bash_history.",
      "url": "https://attack.mitre.org/techniques/T1146/"
    },
    "T1191": {
      "name": "CMSTP",
      "description": "The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
      "url": "https://attack.mitre.org/techniques/T1191/"
    },
    "T1116": {
      "name": "Code Signing",
      "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries . The certificates used during an operation may be created, forged, or stolen by the adversary.",
      "url": "https://attack.mitre.org/techniques/T1116/"
    },
    "T1500": {
      "name": "Compile After Delivery",
      "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Similar to Obfuscated Files or Information, text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.",
      "url": "https://attack.mitre.org/techniques/T1500/"
    },
    "T1223": {
      "name": "Compiled HTML File",
      "description": "Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
      "url": "https://attack.mitre.org/techniques/T1223/"
    },
    "T1109": {
      "name": "Component Firmware",
      "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
      "url": "https://attack.mitre.org/techniques/T1109/"
    },
    "T1122": {
      "name": "Component Object Model Hijacking",
      "description": "The Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
      "url": "https://attack.mitre.org/techniques/T1122/"
    },
    "T1196": {
      "name": "Control Panel Items",
      "description": "Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.",
      "url": "https://attack.mitre.org/techniques/T1196/"
    },
    "T1207": {
      "name": "DCShadow",
      "description": "DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a Domain Controller (DC). Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.",
      "url": "https://attack.mitre.org/techniques/T1207/"
    },
    "T1140": {
      "name": "Deobfuscate/Decode Files or Information",
      "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware, Scripting, PowerShell, or by using utilities present on the system.",
      "url": "https://attack.mitre.org/techniques/T1140/"
    },
    "T1089": {
      "name": "Disabling Security Tools",
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.",
      "url": "https://attack.mitre.org/techniques/T1089/"
    },
    "T1038": {
      "name": "DLL Search Order Hijacking",
      "description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.",
      "url": "https://attack.mitre.org/techniques/T1038/"
    },
    "T1073": {
      "name": "DLL Side-Loading",
      "description": "Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL.",
      "url": "https://attack.mitre.org/techniques/T1073/"
    },
    "T1480": {
      "name": "Execution Guardrails",
      "description": "Execution guardrails constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target.",
      "url": "https://attack.mitre.org/techniques/T1480/"
    },
    "T1211": {
      "name": "Exploitation for Defense Evasion",
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
      "url": "https://attack.mitre.org/techniques/T1211/"
    },
    "T1181": {
      "name": "Extra Window Memory Injection",
      "description": "Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.",
      "url": "https://attack.mitre.org/techniques/T1181/"
    },
    "T1107": {
      "name": "File Deletion",
      "description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.",
      "url": "https://attack.mitre.org/techniques/T1107/"
    },
    "T1222": {
      "name": "File Permissions Modification",
      "description": "File permissions are commonly managed by discretionary access control lists (DACLs) specified by the file owner. File DACL implementation may vary by platform, but generally explicitly designate which users/groups can perform which actions (ex: read, write, execute, etc.).",
      "url": "https://attack.mitre.org/techniques/T1222/"
    },
    "T1006": {
      "name": "File System Logical Offsets",
      "description": "Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.",
      "url": "https://attack.mitre.org/techniques/T1006/"
    },
    "T1144": {
      "name": "Gatekeeper Bypass",
      "description": "In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called com.apple.quarantine. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution.",
      "url": "https://attack.mitre.org/techniques/T1144/"
    },
    "T1484": {
      "name": "Group Policy Modification",
      "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain.",
      "url": "https://attack.mitre.org/techniques/T1484/"
    },
    "T1158": {
      "name": "Hidden Files and Directories",
      "description": "To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).",
      "url": "https://attack.mitre.org/techniques/T1158/"
    },
    "T1147": {
      "name": "Hidden Users",
      "description": "Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in /Library/Preferences/com.apple.loginwindow called Hide500Users that prevents users with userIDs 500 and lower from appearing at the login screen. By using the Create Account technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: sudo dscl . -create /Users/username UniqueID 401 .",
      "url": "https://attack.mitre.org/techniques/T1147/"
    },
    "T1143": {
      "name": "Hidden Window",
      "description": "The configurations for how applications run on macOS and OS X are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window .",
      "url": "https://attack.mitre.org/techniques/T1143/"
    },
    "T1148": {
      "name": "HISTCONTROL",
      "description": "The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
      "url": "https://attack.mitre.org/techniques/T1148/"
    },
    "T1183": {
      "name": "Image File Execution Options Injection",
      "description": "Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger.",
      "url": "https://attack.mitre.org/techniques/T1183/"
    },
    "T1054": {
      "name": "Indicator Blocking",
      "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include modifying sensor settings stored in configuration files and/or Registry keys to disable or maliciously redirect event telemetry.",
      "url": "https://attack.mitre.org/techniques/T1054/"
    },
    "T1066": {
      "name": "Indicator Removal from Tools",
      "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.",
      "url": "https://attack.mitre.org/techniques/T1066/"
    },
    "T1070": {
      "name": "Indicator Removal on Host",
      "description": "Adversaries may delete or alter generated artifacts on a host system, including logs and potentially captured files such as quarantined malware. Locations and format of logs will vary, but typical organic system logs are captured as Windows events or Linux/macOS files such as Bash History and /var/log/* .",
      "url": "https://attack.mitre.org/techniques/T1070/"
    },
    "T1202": {
      "name": "Indirect Command Execution",
      "description": "Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command-Line Interface, Run window, or via scripts.",
      "url": "https://attack.mitre.org/techniques/T1202/"
    },
    "T1130": {
      "name": "Install Root Certificate",
      "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
      "url": "https://attack.mitre.org/techniques/T1130/"
    },
    "T1118": {
      "name": "InstallUtil",
      "description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe. InstallUtil.exe is digitally signed by Microsoft.",
      "url": "https://attack.mitre.org/techniques/T1118/"
    },
    "T1152": {
      "name": "Launchctl",
      "description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made . Running a command from launchctl is as simple as launchctl submit -l -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\". Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges.",
      "url": "https://attack.mitre.org/techniques/T1152/"
    },
    "T1149": {
      "name": "LC_MAIN Hijacking",
      "description": "As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary’s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD . The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn’t know anything was different . By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.",
      "url": "https://attack.mitre.org/techniques/T1149/"
    },
    "T1036": {
      "name": "Masquerading",
      "description": "Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. Several different variations of this technique have been observed.",
      "url": "https://attack.mitre.org/techniques/T1036/"
    },
    "T1112": {
      "name": "Modify Registry",
      "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Persistence and Execution.",
      "url": "https://attack.mitre.org/techniques/T1112/"
    },
    "T1170": {
      "name": "Mshta",
      "description": "Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension .hta. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.",
      "url": "https://attack.mitre.org/techniques/T1170/"
    },
    "T1126": {
      "name": "Network Share Connection Removal",
      "description": "Windows shared drive and Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \\system\\share /delete command.",
      "url": "https://attack.mitre.org/techniques/T1126/"
    },
    "T1096": {
      "name": "NTFS File Attributes",
      "description": "Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.",
      "url": "https://attack.mitre.org/techniques/T1096/"
    },
    "T1027": {
      "name": "Obfuscated Files or Information",
      "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
      "url": "https://attack.mitre.org/techniques/T1027/"
    },
    "T1150": {
      "name": "Plist Modification",
      "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with a user's privileges).",
      "url": "https://attack.mitre.org/techniques/T1150/"
    },
    "T1205": {
      "name": "Port Knocking",
      "description": "Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access. To enable a port, an adversary sends a series of packets with certain characteristics before the port will be opened. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports, but can involve unusual flags, specific strings or other unique characteristics. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
      "url": "https://attack.mitre.org/techniques/T1205/"
    },
    "T1186": {
      "name": "Process Doppelgänging",
      "description": "Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.",
      "url": "https://attack.mitre.org/techniques/T1186/"
    },
    "T1093": {
      "name": "Process Hollowing",
      "description": "Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to Process Injection, execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis.",
      "url": "https://attack.mitre.org/techniques/T1093/"
    },
    "T1055": {
      "name": "Process Injection",
      "description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "url": "https://attack.mitre.org/techniques/T1055/"
    },
    "T1108": {
      "name": "Redundant Access",
      "description": "Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Valid Accounts to use External Remote Services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.",
      "url": "https://attack.mitre.org/techniques/T1108/"
    },
    "T1121": {
      "name": "Regsvcs/Regasm",
      "description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.",
      "url": "https://attack.mitre.org/techniques/T1121/"
    },
    "T1117": {
      "name": "Regsvr32",
      "description": "Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries.",
      "url": "https://attack.mitre.org/techniques/T1117/"
    },
    "T1014": {
      "name": "Rootkit",
      "description": "Rootkits are programs that hide the existence of malware by intercepting (i.e., Hooking) and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a Hypervisor, Master Boot Record, or the System Firmware.",
      "url": "https://attack.mitre.org/techniques/T1014/"
    },
    "T1085": {
      "name": "Rundll32",
      "description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.",
      "url": "https://attack.mitre.org/techniques/T1085/"
    },
    "T1064": {
      "name": "Scripting",
      "description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.",
      "url": "https://attack.mitre.org/techniques/T1064/"
    },
    "T1218": {
      "name": "Signed Binary Proxy Execution",
      "description": "Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application whitelisting and signature validation on systems. This technique accounts for proxy execution methods that are not already accounted for within the existing techniques.",
      "url": "https://attack.mitre.org/techniques/T1218/"
    },
    "T1216": {
      "name": "Signed Script Proxy Execution",
      "description": "Scripts signed with trusted certificates can be used to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application whitelisting solutions that do not account for use of these scripts.",
      "url": "https://attack.mitre.org/techniques/T1216/"
    },
    "T1198": {
      "name": "SIP and Trust Provider Hijacking",
      "description": "In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
      "url": "https://attack.mitre.org/techniques/T1198/"
    },
    "T1045": {
      "name": "Software Packing",
      "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.",
      "url": "https://attack.mitre.org/techniques/T1045/"
    },
    "T1151": {
      "name": "Space after Filename",
      "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to \"evil.txt \" (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed .",
      "url": "https://attack.mitre.org/techniques/T1151/"
    },
    "T1221": {
      "name": "Template Injection",
      "description": "Microsoft’s Open Office XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
      "url": "https://attack.mitre.org/techniques/T1221/"
    },
    "T1099": {
      "name": "Timestomp",
      "description": "Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name Masquerading to hide malware and tools.",
      "url": "https://attack.mitre.org/techniques/T1099/"
    },
    "T1127": {
      "name": "Trusted Developer Utilities",
      "description": "There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.",
      "url": "https://attack.mitre.org/techniques/T1127/"
    },
    "T1078": {
      "name": "Valid Accounts",
      "description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access.",
      "url": "https://attack.mitre.org/techniques/T1078/"
    },
    "T1497": {
      "name": "Virtualization/Sandbox Evasion",
      "description": "Adversaries may check for the presence of a virtual machine environment (VME) or sandbox to avoid potential detection of tools and activities. If the adversary detects a VME, they may alter their malware to conceal the core functions of the implant or disengage from the victim. They may also search for VME artifacts before dropping secondary or additional payloads.",
      "url": "https://attack.mitre.org/techniques/T1497/"
    },
    "T1102": {
      "name": "Web Service",
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.",
      "url": "https://attack.mitre.org/techniques/T1102/"
    },
    "T1220": {
      "name": "XSL Script Processing",
      "description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.",
      "url": "https://attack.mitre.org/techniques/T1220/"
    }
  },
  "Credential Access": {
    "T1098": {
      "name": "Account Manipulation",
      "description": "Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to subvert password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
      "url": "https://attack.mitre.org/techniques/T1098/"
    },
    "T1139": {
      "name": "Bash History",
      "description": "Bash keeps track of the commands users type on the command-line with the \"history \" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials.",
      "url": "https://attack.mitre.org/techniques/T1139/"
    },
    "T1110": {
      "name": "Brute Force",
      "description": "Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.",
      "url": "https://attack.mitre.org/techniques/T1110/"
    },
    "T1003": {
      "name": "Credential Dumping",
      "description": "Credential dumping is the process of obtaining account login and password information, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.",
      "url": "https://attack.mitre.org/techniques/T1003/"
    },
    "T1081": {
      "name": "Credentials in Files",
      "description": "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
      "url": "https://attack.mitre.org/techniques/T1081/"
    },
    "T1214": {
      "name": "Credentials in Registry",
      "description": "The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
      "url": "https://attack.mitre.org/techniques/T1214/"
    },
    "T1212": {
      "name": "Exploitation for Credential Access",
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
      "url": "https://attack.mitre.org/techniques/T1212/"
    },
    "T1187": {
      "name": "Forced Authentication",
      "description": "The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources. Web Distributed Authoring and Versioning (WebDAV) is typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.",
      "url": "https://attack.mitre.org/techniques/T1187/"
    },
    "T1179": {
      "name": "Hooking",
      "description": "Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.",
      "url": "https://attack.mitre.org/techniques/T1179/"
    },
    "T1056": {
      "name": "Input Capture",
      "description": "Adversaries can use methods of capturing user input for obtaining credentials for Valid Accounts and information Collection that include keylogging and user input field interception.",
      "url": "https://attack.mitre.org/techniques/T1056/"
    },
    "T1141": {
      "name": "Input Prompt",
      "description": "When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).",
      "url": "https://attack.mitre.org/techniques/T1141/"
    },
    "T1208": {
      "name": "Kerberoasting",
      "description": "Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service ).",
      "url": "https://attack.mitre.org/techniques/T1208/"
    },
    "T1142": {
      "name": "Keychain",
      "description": "Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in ~/Library/Keychains/,/Library/Keychains/, and /Network/Library/Keychains/. The security command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.",
      "url": "https://attack.mitre.org/techniques/T1142/"
    },
    "T1171": {
      "name": "LLMNR/NBT-NS Poisoning and Relay",
      "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.",
      "url": "https://attack.mitre.org/techniques/T1171/"
    },
    "T1040": {
      "name": "Network Sniffing",
      "description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
      "url": "https://attack.mitre.org/techniques/T1040/"
    },
    "T1174": {
      "name": "Password Filter DLL",
      "description": "Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.",
      "url": "https://attack.mitre.org/techniques/T1174/"
    },
    "T1145": {
      "name": "Private Keys",
      "description": "Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.",
      "url": "https://attack.mitre.org/techniques/T1145/"
    },
    "T1167": {
      "name": "Securityd Memory",
      "description": "In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. Apple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.",
      "url": "https://attack.mitre.org/techniques/T1167/"
    },
    "T1111": {
      "name": "Two-Factor Authentication Interception",
      "description": "Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.",
      "url": "https://attack.mitre.org/techniques/T1111/"
    }
  },
  "Discovery": {
    "T1087": {
      "name": "Account Discovery",
      "description": "Adversaries may attempt to get a listing of local system or domain accounts.",
      "url": "https://attack.mitre.org/techniques/T1087/"
    },
    "T1010": {
      "name": "Application Window Discovery",
      "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.",
      "url": "https://attack.mitre.org/techniques/T1010/"
    },
    "T1217": {
      "name": "Browser Bookmark Discovery",
      "description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.",
      "url": "https://attack.mitre.org/techniques/T1217/"
    },
    "T1482": {
      "name": "Domain Trust Discovery",
      "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify Lateral Movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.",
      "url": "https://attack.mitre.org/techniques/T1482/"
    },
    "T1083": {
      "name": "File and Directory Discovery",
      "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.",
      "url": "https://attack.mitre.org/techniques/T1083/"
    },
    "T1046": {
      "name": "Network Service Scanning",
      "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
      "url": "https://attack.mitre.org/techniques/T1046/"
    },
    "T1135": {
      "name": "Network Share Discovery",
      "description": "Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.",
      "url": "https://attack.mitre.org/techniques/T1135/"
    },
    "T1040": {
      "name": "Network Sniffing",
      "description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
      "url": "https://attack.mitre.org/techniques/T1040/"
    },
    "T1201": {
      "name": "Password Policy Discovery",
      "description": "Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. An adversary may attempt to access detailed information about the password policy used within an enterprise network. This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).",
      "url": "https://attack.mitre.org/techniques/T1201/"
    },
    "T1120": {
      "name": "Peripheral Device Discovery",
      "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
      "url": "https://attack.mitre.org/techniques/T1120/"
    },
    "T1069": {
      "name": "Permission Groups Discovery",
      "description": "Adversaries may attempt to find local system or domain-level groups and permissions settings.",
      "url": "https://attack.mitre.org/techniques/T1069/"
    },
    "T1057": {
      "name": "Process Discovery",
      "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.",
      "url": "https://attack.mitre.org/techniques/T1057/"
    },
    "T1012": {
      "name": "Query Registry",
      "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.",
      "url": "https://attack.mitre.org/techniques/T1012/"
    },
    "T1018": {
      "name": "Remote System Discovery",
      "description": "Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used. Adversaries may also use local host files in order to discover the hostname to IP address mappings of remote systems.",
      "url": "https://attack.mitre.org/techniques/T1018/"
    },
    "T1063": {
      "name": "Security Software Discovery",
      "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. These checks may be built into early-stage remote access tools.",
      "url": "https://attack.mitre.org/techniques/T1063/"
    },
    "T1082": {
      "name": "System Information Discovery",
      "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.",
      "url": "https://attack.mitre.org/techniques/T1082/"
    },
    "T1016": {
      "name": "System Network Configuration Discovery",
      "description": "Adversaries will likely look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.",
      "url": "https://attack.mitre.org/techniques/T1016/"
    },
    "T1049": {
      "name": "System Network Connections Discovery",
      "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
      "url": "https://attack.mitre.org/techniques/T1049/"
    },
    "T1033": {
      "name": "System Owner/User Discovery",
      "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs.",
      "url": "https://attack.mitre.org/techniques/T1033/"
    },
    "T1007": {
      "name": "System Service Discovery",
      "description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist / svc \" using Tasklist, and \"net start \" using Net, but adversaries may also use other tools as well.",
      "url": "https://attack.mitre.org/techniques/T1007/"
    },
    "T1124": {
      "name": "System Time Discovery",
      "description": "The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.",
      "url": "https://attack.mitre.org/techniques/T1124/"
    },
    "T1497": {
      "name": "Virtualization/Sandbox Evasion",
      "description": "Adversaries may check for the presence of a virtual machine environment (VME) or sandbox to avoid potential detection of tools and activities. If the adversary detects a VME, they may alter their malware to conceal the core functions of the implant or disengage from the victim. They may also search for VME artifacts before dropping secondary or additional payloads.",
      "url": "https://attack.mitre.org/techniques/T1497/"
    }
  },
  "Lateral Movement": {
    "T1155": {
      "name": "AppleScript",
      "description": "macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the osalang program.",
      "url": "https://attack.mitre.org/techniques/T1155/"
    },
    "T1017": {
      "name": "Application Deployment Software",
      "description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.",
      "url": "https://attack.mitre.org/techniques/T1017/"
    },
    "T1175": {
      "name": "Distributed Component Object Model",
      "description": "Windows Distributed Component Object Model (DCOM) is transparent middleware that extends the functionality of Component Object Model (COM) beyond a local computer using remote procedure call (RPC) technology. COM is a component of the Windows application programming interface (API) that enables interaction between software objects. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE).",
      "url": "https://attack.mitre.org/techniques/T1175/"
    },
    "T1210": {
      "name": "Exploitation of Remote Services",
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
      "url": "https://attack.mitre.org/techniques/T1210/"
    },
    "T1037": {
      "name": "Logon Scripts",
      "description": "Windows allows logon scripts to be run whenever a specific user or group of users log into a system. The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.",
      "url": "https://attack.mitre.org/techniques/T1037/"
    },
    "T1075": {
      "name": "Pass the Hash",
      "description": "Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
      "url": "https://attack.mitre.org/techniques/T1075/"
    },
    "T1097": {
      "name": "Pass the Ticket",
      "description": "Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
      "url": "https://attack.mitre.org/techniques/T1097/"
    },
    "T1076": {
      "name": "Remote Desktop Protocol",
      "description": "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS.",
      "url": "https://attack.mitre.org/techniques/T1076/"
    },
    "T1105": {
      "name": "Remote File Copy",
      "description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
      "url": "https://attack.mitre.org/techniques/T1105/"
    },
    "T1021": {
      "name": "Remote Services",
      "description": "An adversary may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
      "url": "https://attack.mitre.org/techniques/T1021/"
    },
    "T1091": {
      "name": "Replication Through Removable Media",
      "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
      "url": "https://attack.mitre.org/techniques/T1091/"
    },
    "T1051": {
      "name": "Shared Webroot",
      "description": "Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.",
      "url": "https://attack.mitre.org/techniques/T1051/"
    },
    "T1184": {
      "name": "SSH Hijacking",
      "description": "Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
      "url": "https://attack.mitre.org/techniques/T1184/"
    },
    "T1080": {
      "name": "Taint Shared Content",
      "description": "Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
      "url": "https://attack.mitre.org/techniques/T1080/"
    },
    "T1072": {
      "name": "Third-party Software",
      "description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.",
      "url": "https://attack.mitre.org/techniques/T1072/"
    },
    "T1077": {
      "name": "Windows Admin Shares",
      "description": "Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include C$, ADMIN$, and IPC$.",
      "url": "https://attack.mitre.org/techniques/T1077/"
    },
    "T1028": {
      "name": "Windows Remote Management",
      "description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.",
      "url": "https://attack.mitre.org/techniques/T1028/"
    }
  },
  "Collection": {
    "T1123": {
      "name": "Audio Capture",
      "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.",
      "url": "https://attack.mitre.org/techniques/T1123/"
    },
    "T1119": {
      "name": "Automated Collection",
      "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of Scripting to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools.",
      "url": "https://attack.mitre.org/techniques/T1119/"
    },
    "T1115": {
      "name": "Clipboard Data",
      "description": "Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications.",
      "url": "https://attack.mitre.org/techniques/T1115/"
    },
    "T1213": {
      "name": "Data from Information Repositories",
      "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
      "url": "https://attack.mitre.org/techniques/T1213/"
    },
    "T1005": {
      "name": "Data from Local System",
      "description": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to Exfiltration.",
      "url": "https://attack.mitre.org/techniques/T1005/"
    },
    "T1039": {
      "name": "Data from Network Shared Drive",
      "description": "Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration.",
      "url": "https://attack.mitre.org/techniques/T1039/"
    },
    "T1025": {
      "name": "Data from Removable Media",
      "description": "Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration.",
      "url": "https://attack.mitre.org/techniques/T1025/"
    },
    "T1074": {
      "name": "Data Staged",
      "description": "Collected data is staged in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Data Compressed or Data Encrypted.",
      "url": "https://attack.mitre.org/techniques/T1074/"
    },
    "T1114": {
      "name": "Email Collection",
      "description": "Adversaries may target user email to collect sensitive information from a target.",
      "url": "https://attack.mitre.org/techniques/T1114/"
    },
    "T1056": {
      "name": "Input Capture",
      "description": "Adversaries can use methods of capturing user input for obtaining credentials for Valid Accounts and information Collection that include keylogging and user input field interception.",
      "url": "https://attack.mitre.org/techniques/T1056/"
    },
    "T1185": {
      "name": "Man in the Browser",
      "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
      "url": "https://attack.mitre.org/techniques/T1185/"
    },
    "T1113": {
      "name": "Screen Capture",
      "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.",
      "url": "https://attack.mitre.org/techniques/T1113/"
    },
    "T1125": {
      "name": "Video Capture",
      "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.",
      "url": "https://attack.mitre.org/techniques/T1125/"
    }
  },
  "Command and Control": {
    "T1043": {
      "name": "Commonly Used Port",
      "description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as.",
      "url": "https://attack.mitre.org/techniques/T1043/"
    },
    "T1092": {
      "name": "Communication Through Removable Media",
      "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
      "url": "https://attack.mitre.org/techniques/T1092/"
    },
    "T1090": {
      "name": "Connection Proxy",
      "description": "A connection proxy is used to direct network traffic between systems or act as an intermediary for network communications. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.",
      "url": "https://attack.mitre.org/techniques/T1090/"
    },
    "T1094": {
      "name": "Custom Command and Control Protocol",
      "description": "Adversaries may communicate using a custom command and control protocol instead of encapsulating commands/data in an existing Standard Application Layer Protocol. Implementations include mimicking well-known protocols or developing custom protocols (including raw sockets) on top of fundamental protocols provided by TCP/IP/another standard network stack.",
      "url": "https://attack.mitre.org/techniques/T1094/"
    },
    "T1024": {
      "name": "Custom Cryptographic Protocol",
      "description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.",
      "url": "https://attack.mitre.org/techniques/T1024/"
    },
    "T1132": {
      "name": "Data Encoding",
      "description": "Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, UTF-8, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.",
      "url": "https://attack.mitre.org/techniques/T1132/"
    },
    "T1001": {
      "name": "Data Obfuscation",
      "description": "Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, commingling legitimate traffic with C2 communications traffic, or using a non-standard data encoding system, such as a modified Base64 encoding for the message body of an HTTP request.",
      "url": "https://attack.mitre.org/techniques/T1001/"
    },
    "T1172": {
      "name": "Domain Fronting",
      "description": "Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).",
      "url": "https://attack.mitre.org/techniques/T1172/"
    },
    "T1483": {
      "name": "Domain Generation Algorithms",
      "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.",
      "url": "https://attack.mitre.org/techniques/T1483/"
    },
    "T1008": {
      "name": "Fallback Channels",
      "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
      "url": "https://attack.mitre.org/techniques/T1008/"
    },
    "T1188": {
      "name": "Multi-hop Proxy",
      "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.",
      "url": "https://attack.mitre.org/techniques/T1188/"
    },
    "T1104": {
      "name": "Multi-Stage Channels",
      "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.",
      "url": "https://attack.mitre.org/techniques/T1104/"
    },
    "T1026": {
      "name": "Multiband Communication",
      "description": "Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication.",
      "url": "https://attack.mitre.org/techniques/T1026/"
    },
    "T1079": {
      "name": "Multilayer Encryption",
      "description": "An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.",
      "url": "https://attack.mitre.org/techniques/T1079/"
    },
    "T1205": {
      "name": "Port Knocking",
      "description": "Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access. To enable a port, an adversary sends a series of packets with certain characteristics before the port will be opened. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports, but can involve unusual flags, specific strings or other unique characteristics. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
      "url": "https://attack.mitre.org/techniques/T1205/"
    },
    "T1219": {
      "name": "Remote Access Tools",
      "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be whitelisted within a target environment. Remote access tools like VNC, Ammy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
      "url": "https://attack.mitre.org/techniques/T1219/"
    },
    "T1105": {
      "name": "Remote File Copy",
      "description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
      "url": "https://attack.mitre.org/techniques/T1105/"
    },
    "T1071": {
      "name": "Standard Application Layer Protocol",
      "description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
      "url": "https://attack.mitre.org/techniques/T1071/"
    },
    "T1032": {
      "name": "Standard Cryptographic Protocol",
      "description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
      "url": "https://attack.mitre.org/techniques/T1032/"
    },
    "T1095": {
      "name": "Standard Non-Application Layer Protocol",
      "description": "Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
      "url": "https://attack.mitre.org/techniques/T1095/"
    },
    "T1065": {
      "name": "Uncommonly Used Port",
      "description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.",
      "url": "https://attack.mitre.org/techniques/T1065/"
    },
    "T1102": {
      "name": "Web Service",
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.",
      "url": "https://attack.mitre.org/techniques/T1102/"
    }
  },
  "Exfiltration": {
    "T1020": {
      "name": "Automated Exfiltration",
      "description": "Data, such as sensitive documents, may be exfiltrated through the use of automated processing or Scripting after being gathered during Collection.",
      "url": "https://attack.mitre.org/techniques/T1020/"
    },
    "T1002": {
      "name": "Data Compressed",
      "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.",
      "url": "https://attack.mitre.org/techniques/T1002/"
    },
    "T1022": {
      "name": "Data Encrypted",
      "description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.",
      "url": "https://attack.mitre.org/techniques/T1022/"
    },
    "T1030": {
      "name": "Data Transfer Size Limits",
      "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
      "url": "https://attack.mitre.org/techniques/T1030/"
    },
    "T1048": {
      "name": "Exfiltration Over Alternative Protocol",
      "description": "Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, or some other network protocol. Different channels could include Internet Web services such as cloud storage.",
      "url": "https://attack.mitre.org/techniques/T1048/"
    },
    "T1041": {
      "name": "Exfiltration Over Command and Control Channel",
      "description": "Data exfiltration is performed over the Command and Control channel. Data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "url": "https://attack.mitre.org/techniques/T1041/"
    },
    "T1011": {
      "name": "Exfiltration Over Other Network Medium",
      "description": "Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
      "url": "https://attack.mitre.org/techniques/T1011/"
    },
    "T1052": {
      "name": "Exfiltration Over Physical Medium",
      "description": "In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
      "url": "https://attack.mitre.org/techniques/T1052/"
    },
    "T1029": {
      "name": "Scheduled Transfer",
      "description": "Data exfiltration may be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.",
      "url": "https://attack.mitre.org/techniques/T1029/"
    }
  },
  "Impact": {
    "T1485": {
      "name": "Data Destruction",
      "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
      "url": "https://attack.mitre.org/techniques/T1485/"
    },
    "T1486": {
      "name": "Data Encrypted for Impact",
      "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.",
      "url": "https://attack.mitre.org/techniques/T1486/"
    },
    "T1491": {
      "name": "Defacement",
      "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion.",
      "url": "https://attack.mitre.org/techniques/T1491/"
    },
    "T1488": {
      "name": "Disk Content Wipe",
      "description": "Adversaries may erase the contents of storage devices on specific systems as well as large numbers of systems in a network to interrupt availability to system and network resources.",
      "url": "https://attack.mitre.org/techniques/T1488/"
    },
    "T1487": {
      "name": "Disk Structure Wipe",
      "description": "Adversaries may corrupt or wipe the disk data structures on hard drive necessary to boot systems; targeting specific critical systems as well as a large number of systems in a network to interrupt availability to system and network resources.",
      "url": "https://attack.mitre.org/techniques/T1487/"
    },
    "T1499": {
      "name": "Endpoint Denial of Service",
      "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.",
      "url": "https://attack.mitre.org/techniques/T1499/"
    },
    "T1495": {
      "name": "Firmware Corruption",
      "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
      "url": "https://attack.mitre.org/techniques/T1495/"
    },
    "T1490": {
      "name": "Inhibit System Recovery",
      "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.",
      "url": "https://attack.mitre.org/techniques/T1490/"
    },
    "T1498": {
      "name": "Network Denial of Service",
      "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.",
      "url": "https://attack.mitre.org/techniques/T1498/"
    },
    "T1496": {
      "name": "Resource Hijacking",
      "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems which may impact system and/or hosted service availability.",
      "url": "https://attack.mitre.org/techniques/T1496/"
    },
    "T1494": {
      "name": "Runtime Data Manipulation",
      "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
      "url": "https://attack.mitre.org/techniques/T1494/"
    },
    "T1489": {
      "name": "Service Stop",
      "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
      "url": "https://attack.mitre.org/techniques/T1489/"
    },
    "T1492": {
      "name": "Stored Data Manipulation",
      "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
      "url": "https://attack.mitre.org/techniques/T1492/"
    },
    "T1493": {
      "name": "Transmitted Data Manipulation",
      "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
      "url": "https://attack.mitre.org/techniques/T1493/"
    }
  }
}